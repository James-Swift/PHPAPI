var swdapi=swdapi||{};swdapi.client=swdapi.client||function(i,z){function n(A,B){return typeof A!=="undefined"?A:B}if(!Date.now){Date.now=function(){return new Date().getTime()}}z=n(z,{});if(XMLHttpRequest===undefined){throw"SWDAPI: Required component 'XMLHttpRequest' not defined."}if(Number.isInteger===undefined){throw"SWDAPI: Required component 'Number.isInteger' not defined."}if(console.log===undefined){throw"SWDAPI: Required component 'console.log' not defined."}if(forge_sha256===undefined){throw"SWDAPI: Required component 'forge_sha256' not defined. Did you forget to include it?"}var d=i,l=0,h=null,w=(typeof z.autoReregister==="boolean"?z.autoReregister:true),g=(typeof z.fetchClientData==="function"?z.fetchClientData:e),r=(typeof z.storeClientData==="function"?z.storeClientData:j),t={login:o,logout:y,getAuthToken:q,setDefaultToken:a,request:b,serverDate:m,registerClient:p,setFetchClientDataHandler:function(A){if(typeof A==="function"){g=A;return true}throw"Could not store fetchClientData handler. Not a callable function."},setStoreClientDataHandler:function(A){if(typeof A==="function"){r=A;return true}throw"Could not store storeClientData handler. Not a callable function."}};if(z.setClientName!==undefined&&typeof z.setClientName==="string"){var c=g();if(typeof c!=="object"||c.name===undefined||c.name!==z.setClientName.substring(0,140)||c.secret===undefined||c.id===undefined){p(z.setClientName)}}if(z.serverTimestamp!==undefined){if(Number.isInteger(z.serverTimestamp)===true){x(z.serverTimestamp*1000)}else{console.log("Supplied serverTimestamp was an invalid format. Must be positive integer. The server time will be noted on the next request instead.")}}return t;function v(F,D,C){var E={},B=m().getTime(),A=g();if(A.id!==undefined&&A.secret!==undefined){E.client={id:A.id}}if(C!==null&&C.id!==undefined&&C.uid!==undefined){E.token={id:C.id,uid:C.uid}}E.nonce=f();E.valid={from:Math.floor(B/1000)-(60),to:Math.floor(B/1000)+(60)};E.signature=s(F,E,D,C);return E}function s(H,F,E,C){var G,D,B,A=g();G=JSON.stringify([H,F,E]);D="swdapi";if(F.client!==undefined&&F.client.id!==undefined&&A.secret!==undefined){D+=A.id+A.secret}if(F.token!==undefined&&C.id!==undefined&&C.secret!==undefined){D+=C.id+C.secret}B=forge_sha256(G+D);return B}function o(A,B,C){C=n(C,null);q(A,B,function(D){if(typeof D=="object"){h=a(D)}if(typeof C==="function"){C(D)}})}function y(C){var B,A=h;C=n(C,null);B=function(D){if(D===true){console.log("Logout completed")}else{console.log("Logout failed.");h=a(A)}if(typeof C==="function"){C(D)}};if(h!==null){console.log("Requesting logout.");b("swdapi/invalidateAuthToken",{id:h.id},B,B,h);h=a(null)}else{console.log("logout called when not logged in.");if(typeof C==="function"){C(false)}}}function q(C,I,J,G,B){var H,D,F,A;J=n(J,null);G=n(G,null);B=n(B,null);if(C===undefined||typeof C!=="string"){throw"The user ID you specified is invalid. It must be a non-empty string."}if(C.length<3){throw"The user ID you specified is too short"}if(I===undefined||typeof I!=="string"){throw"The password you specified is invalid. It must be a non-empty string."}if(I.length<5){throw"The password you specified is too short"}if(G!==null&&(!(typeof G==="number"&&(G%1)===0)||G<=m().now())){throw"The expiry you requested for your user session is not a number or is in the past."}if(B!==null&&(!(typeof G==="number"&&(G%1)===0)||B<=1)){throw"The requestTimeout you requested for your user session is not a number or is less than one."}H=g();if(typeof H!=="object"||H.id===undefined||typeof H.id!=="string"||H.secret===undefined||typeof H.secret!=="string"){throw"You cannot request an AuthToken without having a valid client to assign the token to."}var E=f();D={user:C,pass:I,clientID:H.id,requestExpiry:G,requestTimeout:B,salt:E,signature:forge_sha256(JSON.stringify([C,I,G,B,E,H.id,H.secret]))};F=function(K){var L=forge_sha256(JSON.stringify([K.token,E,H.secret]));if(L!==K.signature){throw"Error in returned auth token. Signature is invalid."}console.log("Successfully authenticated as "+C);if(typeof J==="function"){J(K.token)}};A=function(K){console.log("Could not authenticate as "+C);if(typeof J==="function"){J(K)}else{throw K}};b("swdapi/getAuthToken",D,F,A,null)}function a(A){if(A===null||u(A)){h=A;return A}return false}function u(A){if(A===undefined||typeof A!=="object"){console.log("Invalid token: must be object");return false}if(A.id===undefined||Number.isInteger(A.id)===false||A.id<0){console.log("Invalid token: id must be defined and be a non-zero integar");return false}if(A.clientID===undefined||Number.isInteger(A.clientID)===false||A.clientID<0){console.log("Invalid token: clientID must be defined and be a non-zero integar");return false}if(A.uid===undefined||typeof A.uid!=="string"||A.uid.length<1){console.log("Invalid token: uid must be defined and be a non-empty string");return false}if(A.secret===undefined||typeof A.secret!=="string"||A.secret.length!==64){console.log("Invalid token: secret must be defined and be a string (64)");return false}if(A.expires===undefined||Number.isInteger(A.expires)===false||A.expires<1){console.log("Invalid token: expires must be defined and be a non-zero integar");return false}if(A.timeout===undefined||Number.isInteger(A.timeout)===false||A.timeout<1){console.log("Invalid token: timeout must be defined and be a non-zero integar");return false}return true}function p(C,E){C=n(C,null);E=n(E,null);var D=g(),A={salt:f()},B;if(typeof D==="object"&&D.id!==undefined){A.id=D.id}if(typeof D==="object"&&D.id!==undefined&&D.secret!==undefined){A.signature=forge_sha256("swdapi"+D.id+D.secret)}if(typeof C==="string"){A.name=C.substring(0,140)}else{if(C!==null){throw"Cannot register client. Argument 1 must be either a string or null."}else{if(typeof D==="object"&&D.name!==undefined){A.name=D.name.substring(0,140)}else{throw"Cannot register a client without a name. No name is stored and no name was passed to registerClient()"}}}B=function(H){if(typeof H!=="object"||H.id===undefined||H.name===undefined){throw"Could not confirm registration of the client. An unexpected error occured."}var G={name:H.name,id:H.id,},F;if(D.id!==undefined&&D.secret!==undefined){G.secret=D.secret;F=forge_sha256("swdapi"+A.salt+A.id+D.secret);if(H.signature===undefined||F!==H.signature){throw"Failed to confirm the client id. The signature returned by the server doesn't match ours. This should be impossible without a man in the middle."}}else{if(H.secret!==undefined){G.secret=H.secret}}r(G);console.log("New client registered successfully: "+G.name);if(typeof E==="function"){E()}};console.log("Registering client with server.");b("swdapi/registerClient",A,B,function(F){if(typeof F!=="object"||F["SWDAPI-Error"]===undefined||[400014,403002,403004].indexOf(parseInt(F["SWDAPI-Error"].code))===-1){throw"Could not register the client. An unexpected error occured."}console.log("The client id-secret pair stored on this device has either expired or is corrupt. Requesting a new one.");delete D.id;delete D.secret;r({name:A.name,});A={name:A.name,salt:f()};b("swdapi/registerClient",A,B,function(){throw"Could not register the client. A very unexpected error occured."})})}function e(){if(!k("localStorage")){throw"Unable to access localStorage API. You must define your own fetchClientData and storeClientData handlers."}var A={};if(window.localStorage.getItem("client-id")!==null){A.id=window.localStorage.getItem("client-id")}if(window.localStorage.getItem("client-secret")!==null){A.secret=window.localStorage.getItem("client-secret")}if(window.localStorage.getItem("client-name")!==null){A.name=window.localStorage.getItem("client-name")}return A}function j(A){if(!k("localStorage")){throw"Unable to access localStorage API. You must define your own fetchClientData and storeClientData handlers."}if(A.id!==undefined){window.localStorage.setItem("client-id",A.id)}else{window.localStorage.removeItem("client-id")}if(A.secret!==undefined){window.localStorage.setItem("client-secret",A.secret)}else{window.localStorage.removeItem("client-secret")}if(A.name!==undefined){window.localStorage.setItem("client-name",A.name)}else{window.localStorage.removeItem("client-name")}return true}function k(B){try{var D=window[B],A="__storage_test__";D.setItem(A,A);D.removeItem(A);return true}catch(C){return false}}function b(H,E,B,G,D){D=n(D,h);B=n(B,null);G=n(G,null);var C=new XMLHttpRequest(),F=null,A=5;if(D!==null&&u(D)!==true){throw"The authentication token you passed is in an invalid format. Request not sent."}F=v(H,E,D);C.open("POST",d);C.setRequestHeader("Content-Type","application/json;charset=UTF-8");C.onreadystatechange=function(){if(C.readyState!==C.DONE){return}var I=(C.getResponseHeader("content-type")==="application/json"?JSON.parse(C.responseText):C.responseText);if(C.status===200){if(typeof B==="function"){B(I,C.status,H,E,(D===null?null:D.id))}return true}A-=1;if(A>0){if(typeof I!=="string"&&I["SWDAPI-Error"]!==undefined&&I["SWDAPI-Error"]["code"]!==undefined){var J=I["SWDAPI-Error"]["code"];if(J>=400006&&J<=400009){console.log("Request failed due to expiry data. Reseting system time offset and trying again.");x(C.getResponseHeader("date"))}else{if(J==400014||J==403002){console.log("SWDAPI: An api request to '"+H+"' failed because the server reported that the request's signature was invalid. This could be because the client id-secret pair you are using is invalid or has expired, the authentication token you are using has expired or is invalid, or some other secret information embeded in the signature has changed on the server. ");A=0;if(w===true&&H!=="swdapi/registerClient"){console.log("Attemping to automatically re-register the client using the original name.");var K=g();r({name:K.name,});h=a(null);p()}else{console.log("Auto re-registering the client is disabled. Please contact support. Clearing you browser cache and localStorage container will fix this problem but will require you to reauthenticate.")}}else{A=0}}}else{A=0}}if(A>0){b(H,E,B,G,D)}else{if(typeof G==="function"){G(I,C.status,H,E,(D===null?null:D.id))}else{throw [I,C.status,H,E,(D===null?null:D.id)]}}};C.send(JSON.stringify({method:H,meta:F,data:E}));return true}function x(B){var C=new Date(B),A=C.getTime()-Date.now();console.log("Stored server clock offset: "+A+"ms (previously "+l+"ms)");l=A}function m(){return new Date(Date.now()+l)}function f(){return(Math.random().toString(36)+"00000000000000000").slice(2,10+2)}};